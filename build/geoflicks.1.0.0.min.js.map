{"version":3,"sources":["webpack:///geoflicks.1.0.0.min.js","webpack:///webpack/bootstrap 923f5ca5f83770900146","webpack:///./js/app.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","initMap","mapProp","center","google","maps","LatLng","geoCoordinates","zoom","mapTypeId","MapTypeId","ROADMAP","map","Map","document","getElementById","event","addListener","placeMarker","latLng","Number","lat","lng","console","log","$","empty","hide","show","addClass","getPhoto","location","marker","Marker","position","infowindow","InfoWindow","content","toFixed","open","loadScript","script","createElement","src","googleApiKey","body","appendChild","showPhoto","album","albumIndex","htmlString","length","row","col","imgText","flickrPage","url","append","removeClass","css","coord","parameters","format","method","api_key","flickrApiKey","nojsoncallback","lon","content_type","sort","accuracy","min_taken_date","moment","subtract","max_upload_date","radius","radius_units","per_page","page","extras","ajax","type","data","done","result","photoAlbum","each","photos","photo","i","photoObj","photoDetails","title","url_m","owner","push","getGeocode","key","address","results","geometry","fail","jqXHR","error","inputLocation","randList","mapShown","ready","submit","preventDefault","this","find","val","click","hasClass","Math","floor","random","e","toggleClass","text"],"mappings":"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","file":"geoflicks.1.0.0.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t// Global variables\n\tvar inputLocation = \"\";\n\tvar photoAlbum = [];\n\tvar flickrPage = 1;\n\tvar accuracy = 16; //default accuracy.  random search will lower accuracy (lower number)\n\tvar radius = 5; //default radius.  random search will expand search radius (higher number)\n\tvar geoCoordinates = [51.508742, -0.120850];\n\tvar randList = [\"Labuan Bajo, Komodo\", \"New York City, New York\", \"Paris, France\", \"Halstatt, Austria\", \"Sucre, Bolivia\", \"Bhutan\", \"Otaru, Hokkaido\"];\n\tvar googleApiKey = \"AIzaSyBbLnfemMfCf7sJ83aiYAzb8-HR7nJAoOE\";\n\tvar flickrApiKey = \"05b7506e3fd86ae08a540a59e4e7f40d\";\n\tvar map;\n\tvar mapShown = false;\n\t// Functions\n\tfunction initMap() {\n\t    var mapProp = {\n\t        center: new google.maps.LatLng(geoCoordinates[0], geoCoordinates[1]),\n\t        zoom: 11,\n\t        mapTypeId: google.maps.MapTypeId.ROADMAP\n\t    };\n\t    map = new google.maps.Map(document.getElementById('map'), mapProp);\n\t    \n\t    // Place new marker on click\n\t    google.maps.event.addListener(map, 'click', function(event) {\n\t        placeMarker(event.latLng);\n\t        geoCoordinates = [Number(event.latLng.lat()), Number(event.latLng.lng())];\n\t        console.log(\"New click coordinates: \" + geoCoordinates);\n\t        // Kick off photosearch on click:\n\t        $(\"#album\").empty();\n\t        $(\".fail\").hide();\n\t        $(\".success\").hide();\n\t        $(\".loading\").show();\n\t        $(\"#next-page\").addClass(\"disabled\");\n\t        getPhoto(geoCoordinates);\n\t    });\n\t}\n\t\n\tfunction placeMarker(location) {\n\t    var marker = new google.maps.Marker({\n\t        position: location,\n\t        map: map,\n\t    });\n\t    \n\t    var infowindow = new google.maps.InfoWindow({\n\t        content: 'Lat: ' + Number(location.lat()).toFixed(4) + '<br>Lng: ' + Number(location.lng()).toFixed(4)\n\t    });\n\t    \n\t    infowindow.open(map, marker);\n\t}\n\t\n\tfunction loadScript() {\n\t    var script = document.createElement(\"script\");\n\t    script.src = \"http://maps.googleapis.com/maps/api/js?key=\" + googleApiKey + \"&callback=initMap\";\n\t    document.body.appendChild(script);\n\t}\n\t\n\tfunction showPhoto(album) {\n\t    var albumIndex = 0;\n\t    var htmlString = \"\";\n\t    while(albumIndex < album.length) {\n\t        for(var row = 1; row < 5; row++) {\n\t            if(albumIndex < album.length) {\n\t                htmlString += \"<div class='row'>\";\n\t                for(var col = 1; col < 5; col++) {\n\t                    if(albumIndex < album.length) {\n\t                        var imgText = \"<a target='_blank' href='\" + album[albumIndex].flickrPage + \"'><img class='img-thumbnail' src='\" + album[albumIndex].url + \"' width='280' height='190'></a>\";\n\t                        htmlString += \"<div class='col-lg-3 col-md-4 col-sm-6 col-xs-12'>\" + imgText + \"</div>\";\n\t                        albumIndex += 1;\n\t                    };\n\t                };\n\t            };\n\t            htmlString += \"</div>\";\n\t        };\n\t    };\n\t    $(\"#album\").append(htmlString);\n\t    $(\".loading\").hide();\n\t    $(\"#next-page\").removeClass(\"disabled\");\n\t    $(\".success\").show().css(\"color\", \"#3cba54\");\n\t}\n\t\n\tfunction getPhoto(coord) {\n\t    // flickr api key:\n\t    console.log(\"ready to hit flickr\");\n\t    var parameters = {\n\t        format: \"json\",\n\t        method: \"flickr.photos.search\",\n\t        api_key: flickrApiKey,\n\t        nojsoncallback: 1,  // return raw JSON instead of JSONP\n\t        lat : coord[0],\n\t        lon : coord[1],\n\t        /* optional parameters: */\n\t        content_type: 1, // 1 for photos only\n\t        sort: \"interestingness_desc\", //can also be interestingness_desc, time based\n\t        accuracy: accuracy, // range [1: 16] where 1 is world, 16 is street, 11 is around city\n\t        min_taken_date: moment().subtract(12, \"months\").format('YYYY-MM-DD 00:00:00'),\n\t        max_upload_date: moment().format('YYYY-MM-DD 00:00:00'),\n\t        radius: radius, // range (0: 32] km\n\t        radius_units: \"km\",\n\t        per_page: 16, // defaults to 100, max 500 per page\n\t        page: flickrPage,\n\t        extras: \"url_t, url_s, url_m, url_z\"\n\t    };\n\t    \n\t    $.ajax({\n\t        url:  \"https://api.flickr.com/services/rest/\",\n\t        type: \"GET\",\n\t        data: parameters\n\t    })\n\t    .done(function(result){\n\t        console.log(result);\n\t        photoAlbum = []; // re-initialize\n\t        $.each(result.photos.photo, function(i, photoObj){\n\t            // photo is an array of objects, feed index and matching object\n\t            var photoDetails = {\n\t                title: photoObj.title,\n\t                url: photoObj.url_m,\n\t                flickrPage: \"https://www.flickr.com/photos/\" + photoObj.owner + \"/\" + photoObj.id\n\t            }\n\t            photoAlbum.push(photoDetails);\n\t        });\n\t        console.log(photoAlbum);\n\t        if(photoAlbum.length > 0){\n\t            showPhoto(photoAlbum);\n\t        }\n\t        else{\n\t            $(\".loading\").hide();\n\t            $(\".success\").css(\"color\", \"red\").show();\n\t            $(\".fail\").show();\n\t        }\n\t    })\n\t}\n\t\n\tfunction getGeocode(location){\n\t    var parameters = {\n\t        key: googleApiKey,\n\t        address: location\n\t    };\n\t\n\t    $.ajax({\n\t        url: \"https://maps.googleapis.com/maps/api/geocode/json\",\n\t        type: \"GET\",\n\t        data: parameters\n\t    })\n\t    .done(function(result){\n\t        console.log(result);\n\t        if (result.results.length > 0){\n\t            geoCoordinates = []; // re-setting coordinates\n\t            geoCoordinates.push(result.results[0].geometry.location.lat);\n\t            geoCoordinates.push(result.results[0].geometry.location.lng);\n\t            initMap();\n\t            console.log(location + \": \" + geoCoordinates);\n\t            getPhoto(geoCoordinates);\n\t        }\n\t        else {\n\t            console.log(\"no results\");\n\t            $(\".loading\").hide();\n\t            $(\".success\").css(\"color\", \"red\").show();\n\t            $(\".fail\").show();\n\t        }\n\t    })\n\t    .fail(function(jqXHR, error){\n\t        console.log(\"call failed\");\n\t    });\n\t}\n\t\n\t/******************************************************************/\n\t/* Execute when page finishes loading */\n\t/******************************************************************/\n\t$(document).ready(function(){\n\t    console.log(\"Current date: \" + moment().format('YYYY-MM-DD 00:00:00'));\n\t    console.log(\"6 months ago: \" + moment().subtract(6, \"months\").format('YYYY-MM-DD 00:00:00'));\n\t    $(\"#next-page\").addClass(\"disabled\");\n\t    /*************************************\n\t    // Event listeners and actions\n\t    **************************************/\n\t    loadScript();\n\t    // Get user's location input\n\t    $(\"#location-getter\").submit(function(event){\n\t        event.preventDefault();\n\t        $(\"#album\").empty();\n\t        $(\".fail\").hide();\n\t        $(\".success\").hide();\n\t        $(\".loading\").show();\n\t        // always show first page results when clicking submit\n\t        flickrPage = 1;\n\t        inputLocation = $(this).find(\"input[name='location']\").val();\n\t        console.log(\"user entered: \" + inputLocation);\n\t        accuracy = 16;\n\t        radius = 5;\n\t        getGeocode(inputLocation);\n\t        $(\"#next-page\").addClass(\"disabled\");\n\t    });\n\t\n\t\n\t    // User wants to see more results for same location\n\t    $(\"#next-page\").click(function(){\n\t        if ($(\"#next-page\").hasClass(\"disabled\")) {\n\t            ;\n\t        }\n\t        else{\n\t            flickrPage += 1;\n\t            console.log(\"show next batch of results for same location: \" + inputLocation);\n\t            $(\"#album\").empty();\n\t            $(\".fail\").hide();\n\t            $(\".success\").hide();\n\t            $(\".loading\").show();\n\t            $(\"#next-page\").addClass(\"disabled\");\n\t            getPhoto(geoCoordinates);\n\t        }\n\t    });\n\t\n\t    // Show photos from random pick of preset list of locations\n\t    $(\"#lucky\").click(function(){\n\t        $(\"#album\").empty();\n\t        $(\".fail\").hide();\n\t        $(\".success\").hide();\n\t        $(\".loading\").show();\n\t        $(\"#next-page\").addClass(\"disabled\");\n\t        accuracy = 8;\n\t        radius = 30;\n\t\n\t        // Fake randomization:\n\t        inputLocation = randList[Math.floor(Math.random() * (randList.length))];\n\t        console.log(\"Random location is: \" + inputLocation);\n\t        getGeocode(inputLocation);\n\t    });\n\t\n\t    // Menu toggle show/hide sidebar\n\t    $(\"#menu-toggle\").click(function(e) {\n\t        e.preventDefault();\n\t        $(\"#wrapper\").toggleClass(\"toggled\"); \n\t    });\n\t\n\t    // Map toggle\n\t    $(\"#map-toggle\").click(function(e) {\n\t        e.preventDefault();\n\t        $(\"#map\").toggleClass(\"toggled\");\n\t        if (mapShown == false) {\n\t            $(\"#map-toggle\").text('Click anywhere on map');\n\t            mapShown = true;\n\t            initMap();\n\t        }\n\t        else {\n\t            $(\"#map-toggle\").text('Search via Google Maps');\n\t            mapShown = false;\n\t        }\n\t    })\n\t});\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** geoflicks.1.0.0.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 923f5ca5f83770900146\n **/","// Global variables\nvar inputLocation = \"\";\nvar photoAlbum = [];\nvar flickrPage = 1;\nvar accuracy = 16; //default accuracy.  random search will lower accuracy (lower number)\nvar radius = 5; //default radius.  random search will expand search radius (higher number)\nvar geoCoordinates = [51.508742, -0.120850];\nvar randList = [\"Labuan Bajo, Komodo\", \"New York City, New York\", \"Paris, France\", \"Halstatt, Austria\", \"Sucre, Bolivia\", \"Bhutan\", \"Otaru, Hokkaido\"];\nvar googleApiKey = \"AIzaSyBbLnfemMfCf7sJ83aiYAzb8-HR7nJAoOE\";\nvar flickrApiKey = \"05b7506e3fd86ae08a540a59e4e7f40d\";\nvar map;\nvar mapShown = false;\n// Functions\nfunction initMap() {\n    var mapProp = {\n        center: new google.maps.LatLng(geoCoordinates[0], geoCoordinates[1]),\n        zoom: 11,\n        mapTypeId: google.maps.MapTypeId.ROADMAP\n    };\n    map = new google.maps.Map(document.getElementById('map'), mapProp);\n    \n    // Place new marker on click\n    google.maps.event.addListener(map, 'click', function(event) {\n        placeMarker(event.latLng);\n        geoCoordinates = [Number(event.latLng.lat()), Number(event.latLng.lng())];\n        console.log(\"New click coordinates: \" + geoCoordinates);\n        // Kick off photosearch on click:\n        $(\"#album\").empty();\n        $(\".fail\").hide();\n        $(\".success\").hide();\n        $(\".loading\").show();\n        $(\"#next-page\").addClass(\"disabled\");\n        getPhoto(geoCoordinates);\n    });\n}\n\nfunction placeMarker(location) {\n    var marker = new google.maps.Marker({\n        position: location,\n        map: map,\n    });\n    \n    var infowindow = new google.maps.InfoWindow({\n        content: 'Lat: ' + Number(location.lat()).toFixed(4) + '<br>Lng: ' + Number(location.lng()).toFixed(4)\n    });\n    \n    infowindow.open(map, marker);\n}\n\nfunction loadScript() {\n    var script = document.createElement(\"script\");\n    script.src = \"http://maps.googleapis.com/maps/api/js?key=\" + googleApiKey + \"&callback=initMap\";\n    document.body.appendChild(script);\n}\n\nfunction showPhoto(album) {\n    var albumIndex = 0;\n    var htmlString = \"\";\n    while(albumIndex < album.length) {\n        for(var row = 1; row < 5; row++) {\n            if(albumIndex < album.length) {\n                htmlString += \"<div class='row'>\";\n                for(var col = 1; col < 5; col++) {\n                    if(albumIndex < album.length) {\n                        var imgText = \"<a target='_blank' href='\" + album[albumIndex].flickrPage + \"'><img class='img-thumbnail' src='\" + album[albumIndex].url + \"' width='280' height='190'></a>\";\n                        htmlString += \"<div class='col-lg-3 col-md-4 col-sm-6 col-xs-12'>\" + imgText + \"</div>\";\n                        albumIndex += 1;\n                    };\n                };\n            };\n            htmlString += \"</div>\";\n        };\n    };\n    $(\"#album\").append(htmlString);\n    $(\".loading\").hide();\n    $(\"#next-page\").removeClass(\"disabled\");\n    $(\".success\").show().css(\"color\", \"#3cba54\");\n}\n\nfunction getPhoto(coord) {\n    // flickr api key:\n    console.log(\"ready to hit flickr\");\n    var parameters = {\n        format: \"json\",\n        method: \"flickr.photos.search\",\n        api_key: flickrApiKey,\n        nojsoncallback: 1,  // return raw JSON instead of JSONP\n        lat : coord[0],\n        lon : coord[1],\n        /* optional parameters: */\n        content_type: 1, // 1 for photos only\n        sort: \"interestingness_desc\", //can also be interestingness_desc, time based\n        accuracy: accuracy, // range [1: 16] where 1 is world, 16 is street, 11 is around city\n        min_taken_date: moment().subtract(12, \"months\").format('YYYY-MM-DD 00:00:00'),\n        max_upload_date: moment().format('YYYY-MM-DD 00:00:00'),\n        radius: radius, // range (0: 32] km\n        radius_units: \"km\",\n        per_page: 16, // defaults to 100, max 500 per page\n        page: flickrPage,\n        extras: \"url_t, url_s, url_m, url_z\"\n    };\n    \n    $.ajax({\n        url:  \"https://api.flickr.com/services/rest/\",\n        type: \"GET\",\n        data: parameters\n    })\n    .done(function(result){\n        console.log(result);\n        photoAlbum = []; // re-initialize\n        $.each(result.photos.photo, function(i, photoObj){\n            // photo is an array of objects, feed index and matching object\n            var photoDetails = {\n                title: photoObj.title,\n                url: photoObj.url_m,\n                flickrPage: \"https://www.flickr.com/photos/\" + photoObj.owner + \"/\" + photoObj.id\n            }\n            photoAlbum.push(photoDetails);\n        });\n        console.log(photoAlbum);\n        if(photoAlbum.length > 0){\n            showPhoto(photoAlbum);\n        }\n        else{\n            $(\".loading\").hide();\n            $(\".success\").css(\"color\", \"red\").show();\n            $(\".fail\").show();\n        }\n    })\n}\n\nfunction getGeocode(location){\n    var parameters = {\n        key: googleApiKey,\n        address: location\n    };\n\n    $.ajax({\n        url: \"https://maps.googleapis.com/maps/api/geocode/json\",\n        type: \"GET\",\n        data: parameters\n    })\n    .done(function(result){\n        console.log(result);\n        if (result.results.length > 0){\n            geoCoordinates = []; // re-setting coordinates\n            geoCoordinates.push(result.results[0].geometry.location.lat);\n            geoCoordinates.push(result.results[0].geometry.location.lng);\n            initMap();\n            console.log(location + \": \" + geoCoordinates);\n            getPhoto(geoCoordinates);\n        }\n        else {\n            console.log(\"no results\");\n            $(\".loading\").hide();\n            $(\".success\").css(\"color\", \"red\").show();\n            $(\".fail\").show();\n        }\n    })\n    .fail(function(jqXHR, error){\n        console.log(\"call failed\");\n    });\n}\n\n/******************************************************************/\n/* Execute when page finishes loading */\n/******************************************************************/\n$(document).ready(function(){\n    console.log(\"Current date: \" + moment().format('YYYY-MM-DD 00:00:00'));\n    console.log(\"6 months ago: \" + moment().subtract(6, \"months\").format('YYYY-MM-DD 00:00:00'));\n    $(\"#next-page\").addClass(\"disabled\");\n    /*************************************\n    // Event listeners and actions\n    **************************************/\n    loadScript();\n    // Get user's location input\n    $(\"#location-getter\").submit(function(event){\n        event.preventDefault();\n        $(\"#album\").empty();\n        $(\".fail\").hide();\n        $(\".success\").hide();\n        $(\".loading\").show();\n        // always show first page results when clicking submit\n        flickrPage = 1;\n        inputLocation = $(this).find(\"input[name='location']\").val();\n        console.log(\"user entered: \" + inputLocation);\n        accuracy = 16;\n        radius = 5;\n        getGeocode(inputLocation);\n        $(\"#next-page\").addClass(\"disabled\");\n    });\n\n\n    // User wants to see more results for same location\n    $(\"#next-page\").click(function(){\n        if ($(\"#next-page\").hasClass(\"disabled\")) {\n            ;\n        }\n        else{\n            flickrPage += 1;\n            console.log(\"show next batch of results for same location: \" + inputLocation);\n            $(\"#album\").empty();\n            $(\".fail\").hide();\n            $(\".success\").hide();\n            $(\".loading\").show();\n            $(\"#next-page\").addClass(\"disabled\");\n            getPhoto(geoCoordinates);\n        }\n    });\n\n    // Show photos from random pick of preset list of locations\n    $(\"#lucky\").click(function(){\n        $(\"#album\").empty();\n        $(\".fail\").hide();\n        $(\".success\").hide();\n        $(\".loading\").show();\n        $(\"#next-page\").addClass(\"disabled\");\n        accuracy = 8;\n        radius = 30;\n\n        // Fake randomization:\n        inputLocation = randList[Math.floor(Math.random() * (randList.length))];\n        console.log(\"Random location is: \" + inputLocation);\n        getGeocode(inputLocation);\n    });\n\n    // Menu toggle show/hide sidebar\n    $(\"#menu-toggle\").click(function(e) {\n        e.preventDefault();\n        $(\"#wrapper\").toggleClass(\"toggled\"); \n    });\n\n    // Map toggle\n    $(\"#map-toggle\").click(function(e) {\n        e.preventDefault();\n        $(\"#map\").toggleClass(\"toggled\");\n        if (mapShown == false) {\n            $(\"#map-toggle\").text('Click anywhere on map');\n            mapShown = true;\n            initMap();\n        }\n        else {\n            $(\"#map-toggle\").text('Search via Google Maps');\n            mapShown = false;\n        }\n    })\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/app.js\n ** module id = 0\n ** module chunks = 0\n **/"],"sourceRoot":""}