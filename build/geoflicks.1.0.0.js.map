{"version":3,"sources":["webpack:///webpack/bootstrap 013428671a07b4ce970e","webpack:///./js/app.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;AACA;AACA;AACA,mBAAkB;AAClB,gBAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAwB,SAAS;AACjC;AACA;AACA,iCAAgC,SAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,yBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA,iCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA,8C;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL,EAAC,E","file":"geoflicks.1.0.0.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 013428671a07b4ce970e\n **/","// Global variables\nvar inputLocation = \"\";\nvar photoAlbum = [];\nvar flickrPage = 1;\nvar accuracy = 16; //default accuracy.  random search will lower accuracy (lower number)\nvar radius = 5; //default radius.  random search will expand search radius (higher number)\nvar geoCoordinates = [51.508742, -0.120850];\nvar randList = [\"Labuan Bajo, Komodo\", \"New York City, New York\", \"Paris, France\", \"Halstatt, Austria\", \"Sucre, Bolivia\", \"Bhutan\", \"Otaru, Hokkaido\"];\nvar googleApiKey = \"AIzaSyBbLnfemMfCf7sJ83aiYAzb8-HR7nJAoOE\";\nvar flickrApiKey = \"05b7506e3fd86ae08a540a59e4e7f40d\";\nvar map;\nvar mapShown = false;\n// Functions\nfunction initMap() {\n    var mapProp = {\n        center: new google.maps.LatLng(geoCoordinates[0], geoCoordinates[1]),\n        zoom: 11,\n        mapTypeId: google.maps.MapTypeId.ROADMAP\n    };\n    map = new google.maps.Map(document.getElementById('map'), mapProp);\n    \n    // Place new marker on click\n    google.maps.event.addListener(map, 'click', function(event) {\n        placeMarker(event.latLng);\n        geoCoordinates = [Number(event.latLng.lat()), Number(event.latLng.lng())];\n        console.log(\"New click coordinates: \" + geoCoordinates);\n        // Kick off photosearch on click:\n        $(\"#album\").empty();\n        $(\".fail\").hide();\n        $(\".success\").hide();\n        $(\".loading\").show();\n        $(\"#next-page\").addClass(\"disabled\");\n        getPhoto(geoCoordinates);\n    });\n}\n\nfunction placeMarker(location) {\n    var marker = new google.maps.Marker({\n        position: location,\n        map: map,\n    });\n    \n    var infowindow = new google.maps.InfoWindow({\n        content: 'Lat: ' + Number(location.lat()).toFixed(4) + '<br>Lng: ' + Number(location.lng()).toFixed(4)\n    });\n    \n    infowindow.open(map, marker);\n}\n\nfunction loadScript() {\n    var script = document.createElement(\"script\");\n    script.src = \"http://maps.googleapis.com/maps/api/js?key=\" + googleApiKey + \"&callback=initMap\";\n    document.body.appendChild(script);\n}\n\nfunction showPhoto(album) {\n    var albumIndex = 0;\n    var htmlString = \"\";\n    while(albumIndex < album.length) {\n        for(var row = 1; row < 5; row++) {\n            if(albumIndex < album.length) {\n                htmlString += \"<div class='row'>\";\n                for(var col = 1; col < 5; col++) {\n                    if(albumIndex < album.length) {\n                        var imgText = \"<a target='_blank' href='\" + album[albumIndex].flickrPage + \"'><img class='img-thumbnail' src='\" + album[albumIndex].url + \"' width='280' height='190'></a>\";\n                        htmlString += \"<div class='col-lg-3 col-md-4 col-sm-6 col-xs-12'>\" + imgText + \"</div>\";\n                        albumIndex += 1;\n                    };\n                };\n            };\n            htmlString += \"</div>\";\n        };\n    };\n    $(\"#album\").append(htmlString);\n    $(\".loading\").hide();\n    $(\"#next-page\").removeClass(\"disabled\");\n    $(\".success\").show().css(\"color\", \"#3cba54\");\n}\n\nfunction getPhoto(coord) {\n    // flickr api key:\n    console.log(\"ready to hit flickr\");\n    var parameters = {\n        format: \"json\",\n        method: \"flickr.photos.search\",\n        api_key: flickrApiKey,\n        nojsoncallback: 1,  // return raw JSON instead of JSONP\n        lat : coord[0],\n        lon : coord[1],\n        /* optional parameters: */\n        content_type: 1, // 1 for photos only\n        sort: \"interestingness_desc\", //can also be interestingness_desc, time based\n        accuracy: accuracy, // range [1: 16] where 1 is world, 16 is street, 11 is around city\n        min_taken_date: moment().subtract(12, \"months\").format('YYYY-MM-DD 00:00:00'),\n        max_upload_date: moment().format('YYYY-MM-DD 00:00:00'),\n        radius: radius, // range (0: 32] km\n        radius_units: \"km\",\n        per_page: 16, // defaults to 100, max 500 per page\n        page: flickrPage,\n        extras: \"url_t, url_s, url_m, url_z\"\n    };\n    \n    $.ajax({\n        url:  \"https://api.flickr.com/services/rest/\",\n        type: \"GET\",\n        data: parameters\n    })\n    .done(function(result){\n        console.log(result);\n        photoAlbum = []; // re-initialize\n        $.each(result.photos.photo, function(i, photoObj){\n            // photo is an array of objects, feed index and matching object\n            var photoDetails = {\n                title: photoObj.title,\n                url: photoObj.url_m,\n                flickrPage: \"https://www.flickr.com/photos/\" + photoObj.owner + \"/\" + photoObj.id\n            }\n            photoAlbum.push(photoDetails);\n        });\n        console.log(photoAlbum);\n        if(photoAlbum.length > 0){\n            showPhoto(photoAlbum);\n        }\n        else{\n            $(\".loading\").hide();\n            $(\".success\").css(\"color\", \"red\").show();\n            $(\".fail\").show();\n        }\n    })\n}\n\nfunction getGeocode(location){\n    var parameters = {\n        key: googleApiKey,\n        address: location\n    };\n\n    $.ajax({\n        url: \"https://maps.googleapis.com/maps/api/geocode/json\",\n        type: \"GET\",\n        data: parameters\n    })\n    .done(function(result){\n        console.log(result);\n        if (result.results.length > 0){\n            geoCoordinates = []; // re-setting coordinates\n            geoCoordinates.push(result.results[0].geometry.location.lat);\n            geoCoordinates.push(result.results[0].geometry.location.lng);\n            initMap();\n            console.log(location + \": \" + geoCoordinates);\n            getPhoto(geoCoordinates);\n        }\n        else {\n            console.log(\"no results\");\n            $(\".loading\").hide();\n            $(\".success\").css(\"color\", \"red\").show();\n            $(\".fail\").show();\n        }\n    })\n    .fail(function(jqXHR, error){\n        console.log(\"call failed\");\n    });\n}\n\n/******************************************************************/\n/* Execute when page finishes loading */\n/******************************************************************/\n$(document).ready(function(){\n    console.log(\"Current date: \" + moment().format('YYYY-MM-DD 00:00:00'));\n    console.log(\"6 months ago: \" + moment().subtract(6, \"months\").format('YYYY-MM-DD 00:00:00'));\n    $(\"#next-page\").addClass(\"disabled\");\n    /*************************************\n    // Event listeners and actions\n    **************************************/\n    loadScript();\n    // Get user's location input\n    $(\"#location-getter\").submit(function(event){\n        event.preventDefault();\n        $(\"#album\").empty();\n        $(\".fail\").hide();\n        $(\".success\").hide();\n        $(\".loading\").show();\n        // always show first page results when clicking submit\n        flickrPage = 1;\n        inputLocation = $(this).find(\"input[name='location']\").val();\n        console.log(\"user entered: \" + inputLocation);\n        accuracy = 16;\n        radius = 5;\n        getGeocode(inputLocation);\n        $(\"#next-page\").addClass(\"disabled\");\n    });\n\n\n    // User wants to see more results for same location\n    $(\"#next-page\").click(function(){\n        if ($(\"#next-page\").hasClass(\"disabled\")) {\n            ;\n        }\n        else{\n            flickrPage += 1;\n            console.log(\"show next batch of results for same location: \" + inputLocation);\n            $(\"#album\").empty();\n            $(\".fail\").hide();\n            $(\".success\").hide();\n            $(\".loading\").show();\n            $(\"#next-page\").addClass(\"disabled\");\n            getPhoto(geoCoordinates);\n        }\n    });\n\n    // Show photos from random pick of preset list of locations\n    $(\"#lucky\").click(function(){\n        $(\"#album\").empty();\n        $(\".fail\").hide();\n        $(\".success\").hide();\n        $(\".loading\").show();\n        $(\"#next-page\").addClass(\"disabled\");\n        accuracy = 8;\n        radius = 30;\n\n        // Fake randomization:\n        inputLocation = randList[Math.floor(Math.random() * (randList.length))];\n        console.log(\"Random location is: \" + inputLocation);\n        getGeocode(inputLocation);\n    });\n\n    // Menu toggle show/hide sidebar\n    $(\"#menu-toggle\").click(function(e) {\n        e.preventDefault();\n        $(\"#wrapper\").toggleClass(\"toggled\"); \n    });\n\n    // Map toggle\n    $(\"#map-toggle\").click(function(e) {\n        e.preventDefault();\n        $(\"#map\").toggleClass(\"toggled\");\n        if (mapShown == false) {\n            $(\"#map-toggle\").text('Click anywhere on map');\n            mapShown = true;\n            initMap();\n        }\n        else {\n            $(\"#map-toggle\").text('Search via Google Maps');\n            mapShown = false;\n        }\n    })\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/app.js\n ** module id = 0\n ** module chunks = 0\n **/"],"sourceRoot":""}